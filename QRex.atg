#include <iostream>
#include <string>
#include "TDV.h"
#include "wchar.h"

#define GLOBAL_INT 	10000
#define GLOBAL_FLOAT	12000
#define GLOBAL_STRING	14000

#define CONSTANT_INT	16000
#define CONSTANT_FLOAT	18000
#define CONSTANT_STRING 20000

/*-------------------------------------------------------------*/
COMPILER QRex

	int //operadores
	MAS,MENOS,POR,DIVISION,MODULO,MAYOR,MENOR,DIFERENTE,IGUAL,MAYQUE,MENQUE,AND,OR,NOT,ASIGNA;


	int //tipos
	tipovariable,enterov,flotantev,cadenav,errorv;
	int 
	tipofuncion,enterof,flotantef,voidf,errorf;

	int //tipos de objetos
	tipo,variable,funcion,llamada,undef,lectura,escritura,condicion,ciclo,regreso;
	
	int //Manejo de expresiones
	expresion;

	int //Manejo de retornos
	retorno;
	
	int //Declaraciones Globales
	global;

	int //Declaracion de parametros en una funcion
	parametros;

	/*Parte para codigos de operacion*/

	TablaDeVariables *tab;		
	FuncionX *f;
	Variable *v;

	//Tabla de Variables globales y Constantes
	Contexto *tabconstantes;
	Contexto *tabglobales;

	std::wstring identificador;

	//Tabla de variables globales

	void InitDeclarations() { // it must exist
		MAS=0;
		MENOS=1;
		POR=2;
		DIVISION=3;
		MODULO=4;
		MAYOR=5;
		MENOR=6;
		DIFERENTE=7;
		IGUAL=8;
		MAYQUE=9;
		MENQUE=10;
		AND=11;
		OR=12;
		NOT=13;
		ASIGNA=14;
	
		//Inicializa la tabla de Variables
		tab = new TablaDeVariables();

		//Inicializa tabla de Constantes
		tabconstantes = new Contexto(CONSTANT_INT,CONSTANT_FLOAT,CONSTANT_STRING);
		
		//Inicializa tabla de globales
		tabglobales = new Contexto(GLOBAL_INT,GLOBAL_FLOAT,GLOBAL_STRING);

		//Inicializa la funcion
		f = new FuncionX();
		// Codigos de funciones y variables
		tipovariable=-1;enterov=11;flotantev=12;cadenav=13;errorv=14;

		tipofuncion=-1;enterof=21;flotantef=22;voidf=23;errorf=24;

		//Manejo de expresiones
		expresion = 0;

		//Manejo de retorno
		retorno = 0;

		//Declaraciones globales
		global = 0;

		//Declaracion de parametros
		parametros = 0;

		//Tipo de objetos
		variable = 0;
		funcion = 1;
		llamada = 3;
		lectura = 4;
		escritura = 5;
		condicion = 6;
		ciclo = 7;
		regreso = 8;
		undef = 9;

        int cubo[4][5][15] = {{{11,11,11,11,11,11,11,11,11,11,11,11,11,-666,11},{12,12,12,12,12,11,11,11,11,11,11,11,11,-666,-666},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,11,-666,}},
            {{12,12,12,12,12,11,11,11,11,11,11,-666,-666,-666,12},{12,12,12,12,12,11,11,11,11,11,11,-666,-666,-666,12},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,11,-666,}},
            {{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,13},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666}},
            {{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666},{-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666,-666}}
        };
		
	}

	void Err(wchar_t* msg) {
		errors->Error(la->line, la->col, msg);
	}


	//Esto se utiliza para registrar la funcion main en la tabla de funciones
	void registraMain(){
		std::map<std::wstring,FuncionX *>::iterator it = tab->fhash.find(L"main");
		if( it == tab->fhash.end() && identificador != f->nombre) {
		//Checa si hay una funcion antes de crear la funcion main
			if(f->nombre == std::wstring(L"")){
				f->nombre=std::wstring(L"main");
				f->tipo=voidf;
					
			}else{
			//Inserta la funcion  al hash y crea la funcion main
				tab->fhash.insert(std::make_pair(f->nombre,f));
				f = new FuncionX();
				f->nombre=std::wstring(L"main");
				f->tipo=voidf;
			}
		}else{
			Err(L"No puede haber dos funciones main()");
		}

	}


	void imprimeRegistros(){
		FuncionX *func;
		Variable *var;

		std::wcout<<L"\n\nTabla de Funciones y Variables\n";
		std::map<std::wstring,FuncionX *>::iterator it = tab->fhash.begin();
		while (it != tab->fhash.end()){
			func = it->second;
			std::wcout<<L" "<< func->tipo<< L" " << func->nombre << L'\n';
			
			//Imprime Parametros si los tiene.
			func->parametros->Print();
			
			std::wcout << L"intNum:"<< func->intNum << L" floatNum:";
			std::wcout << func->floatNum << L" stringNum:" << func->stringNum << L'\n';
	
			//Variables Dentro
			std::map<std::wstring,Variable *>::iterator it2 = func->vhash.begin();
			while(it2 != it->second->vhash.end()){
				var = it2->second;
				std::wcout << L"		nombre:" << var->nombre;
				std::wcout << L" tipo:" << var->tipo;
				std::wcout << L" direccion:" << var->direccion << L'\n';
	
				it2++;
			}
			
			it++;
	
		}

		std::wcout<<L"Tabla de Variables Globales\n";
		std::map<std::wstring,Variable *>::iterator it2 = tabglobales->vhash.begin();
		while (it2 != tabglobales->vhash.end()){
			var = it2->second;
			std::wcout << L"	nombre:" << var->nombre;
			std::wcout << L" tipo:" << var->tipo;
			std::wcout << L" direccion:" << var->direccion << L'\n';
			it2++;
		}

		std::wcout<<L"Tabla de Variables Constantes\n";
		it2 = tabconstantes->vhash.begin();
		while (it2 != tabconstantes->vhash.end()){
			var = it2->second;
			std::wcout << L"	nombre:" << var->nombre;
			std::wcout << L" tipo:" << var->tipo;
			std::wcout << L" direccion:" << var->direccion << L'\n';
			it2++;
		}

	}

	//Registra las constantes encontradas en el programa
	void registraConstante(){
		std::map<std::wstring,Variable *>::iterator it = tabconstantes->vhash.find(identificador);
			if(it == tabconstantes->vhash.end()){
				v = new Variable();
				v->nombre = identificador;
				v->tipo = tipovariable;
				switch(tipovariable){
					case 11://entero
						v->direccion=tabconstantes->intNum;
						tabconstantes->intNum++;
						break;
					case 12://flotante
						v->direccion=tabconstantes->floatNum;
						tabconstantes->floatNum++;
						break;
					case 13://string
						v->direccion=tabconstantes->stringNum;
						tabconstantes->stringNum++;
						break;
				}
				//Se registra la constante
				tabconstantes->vhash.insert(std::make_pair(v->nombre,v));			
			}
	}


/*-------------------------------------------------------------*/
CHARACTERS
letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
digit = "0123456789".
cr  = '\r'.
lf  = '\n'.
tab = '\t'.
AnyButQuote = ANY - '"'.

TOKENS
id  =  letter {letter | digit}.
cte_string = '"'{AnyButQuote} '"'.
cte_float = {digit}'.'digit {digit}.
cte_int = digit {digit}.
int = "int".
float = "float".
string = "string".
if = "if".
else = "else".
print = "print".
main = "main".
read = "read".
while = "while".
void = "void".
return = "return".
global = "global".
sign = "sign".

IGNORE cr + lf + tab



PRODUCTIONS
//Inicia QRex----------------------------------------------------------------------
QRex (.InitDeclarations();.) //Inicializa las variables
	= {global DeclaracionGlobal | sign Funcion ';'} QRex2.


QRex2 = {Funcion Cuerpo2}
				(.tipo = funcion;.)
main '(' ')'
				(.registraMain();.) 
				(.tipo = undef;.)
Cuerpo
				(.
					//Inserta la funcion main al final de todo
					tab->fhash.insert(std::make_pair(f->nombre,f));
				.)

(.imprimeRegistros();.).
//Fin QRex-------------------------------------------------------------------------

//Inicia Declaracion---------------------------------------------------------------
DeclaracionGlobal (. wchar_t* name; global = 1; .) 
= 
						(.tipo = variable;		.) 
Tipov ID<name> {',' ID<name>} ';'
						(. tipo = undef; global = 0;	.)
.
//Finaliza Declaracion-----------------------------------------------------------------


//Inicia Cuerpo--------------------------------------------------------------------
Cuerpo = '{'{Declaracion} {Estatuto} '}'.
//Finaliza Cuerpo------------------------------------------------------------------


//Inicia Declaracion---------------------------------------------------------------
Declaracion (. wchar_t* name; .) = 
						(.tipo = variable;.) 
Tipov ID<name> {',' ID<name>} ';'
						(. tipo = undef;.)
.
//Finaliza Declaracion-----------------------------------------------------------------
Llamada = '(' [Param] ')'.

Lectura (. wchar_t* name; .) = read '(' 
					(.tipo=lectura;.)
ID<name> ')' ';'
					(.tipo = undef;.)
.

Var_Cte(.wchar_t* name;.) = 
	  cte_int
					(.tipovariable = enterov;
						name = coco_string_create(t->val);
						identificador = std::wstring(name);
						coco_string_delete(name);
						registraConstante();
					.)
	| cte_float
					(.tipovariable = flotantev;
						name = coco_string_create(t->val);
						identificador = std::wstring(name);
						coco_string_delete(name);
						registraConstante();
					.)
	| ID<name> [Llamada].

Param (.wchar_t* name;.) = 
	(Expresion|
		cte_string
					(.tipovariable = cadenav;
						name = coco_string_create(t->val);
						identificador = std::wstring(name);
						coco_string_delete(name);
						registraConstante();
					.)

) [',' Param].

//Inicia Funcion () ----------------------------------------------------------------
Funcion (. wchar_t* name; .) = Tipof 
					(.tipo = funcion;.)
ID<name>
					(.tipo = variable;.)
'(' [Dec_Param] ')'
					(.tipo = undef;.)
.

//Finaliza Funcion () ----------------------------------------------------------------

Dec_Param (. wchar_t* name; .) = (.parametros = 1;.)Tipov ID<name> (.parametros = 0;.) [',' Dec_Param].


//Inicia Condicion ----------------------------------------------------------------
Condicion = if
			(.tipo = condicion;.)
 '(' Expresion ')' 
			(.tipo = undef;.)
Cuerpo [else Cuerpo].


//Finaliza Condicion ----------------------------------------------------------------
Asignacion (. wchar_t* name; .) = ID<name> '=' (Expresion | 
		cte_string
					(.tipovariable = cadenav;
						name = coco_string_create(t->val);
						identificador = std::wstring(name);
						coco_string_delete(name);
						registraConstante();
					.)

) ';'.



//Inicia Escritura--------------------------------------------------
Escritura = print 			(.tipo = escritura;.)
'(' Param ')' ';'
					(.tipo = undef;.)
.
//Finaliza Escritura--------------------------------------------------


Ciclo = while 
			(.tipo = ciclo;.)
'(' Expresion ')' 
			(.tipo = undef;.)
Cuerpo.

//Inicia Tipo de Funcion--------------------------------------------------
Tipof = int (. tipofuncion = enterof;   .)
    | float (. tipofuncion = flotantef; .)
    | void  (. tipofuncion = voidf; .).

//Finaliza tipo de funcion -----------------------------------------------


//Inicia tipo de variable ------------------------------------------------
Tipov = int   (. tipovariable = enterov;    .)
    | float   (. tipovariable = flotantev;  .)
    | string  (. tipovariable = cadenav;    .).

//Finaliza tipo de variable ----------------------------------------------


Estatuto = Asignacion
    | Condicion
    | Escritura
    | Lectura
    | Ciclo.

Expresion =
				 (.expresion = 1;.)
 Exp1 ["||" Expresion]
				 (.expresion = 0;.)
.

Exp1 = Exp2 ["&&" Exp1].

Exp2 = Exp3 [('>'|'<'|">="|"<="|"=="|"!=") Exp3].

Exp3 = Exp4 [('+'|'-') Exp4].

Exp4 = Exp5 [('*'|'/'|'%') Exp5].

Exp5 = ['!'] Exp6.

Exp6 = '(' Expresion ')'
    | [('+'|'-')] Var_Cte.

//Inicio Cuerpo 2 (Cuerpo funcion)------------------------------------------------------------
Cuerpo2 (.wchar_t* name;.) = '{' {Declaracion} {Estatuto} [
					(.retorno = 1;tipo = regreso;.)
return (Expresion|
			cte_string

					(.tipovariable = cadenav;
						name = coco_string_create(t->val);
						identificador = std::wstring(name);
						coco_string_delete(name);
						registraConstante();
					.)


)';'] '}'
					(.retorno = 0;tipo = undef;.)
.
//Finaliza Cuerpo 2 (Cuerpo funcion)------------------------------------------------------------

/*Auxiliares*/
ID<wchar_t* name> = id 

			(. 	//Crea el string de coco 
				//Conversion para meter el string a la tabla de hash
				//Eliminar el string de coco
				name = coco_string_create(t->val);identificador = std::wstring(name);coco_string_delete(name);

				//std::wcout << identificador << L"\n";
				if(tipo == variable && global){
					std::map<std::wstring,Variable *>::iterator it = tabglobales->vhash.find(identificador);
			
					if(it != tabglobales->vhash.end()){
						std::wcout << L"Global("<<identificador<<")";
						Err(L"Variable already declared.");
					}else{
						v = new Variable();
						v->nombre = identificador;
						v->tipo = tipovariable;
						switch(tipovariable){
							case 11://entero
								v->direccion=tabglobales->intNum;
								tabglobales->intNum++;
								break;
							case 12://flotante
								v->direccion=tabglobales->floatNum;
								tabglobales->floatNum++;
								break;
							case 13://string
								v->direccion=tabglobales->stringNum;
								tabglobales->stringNum++;
								break;
						}	
					}
					//Insertar en tabla de variables Globales
					tabglobales->vhash.insert(std::make_pair(v->nombre,v));

				}if(tipo == variable){
					//Por ahora solo se guardan las variables
					//Mas adelante se guasrdaran los valores en la estructura
						std::map<std::wstring,Variable *>::iterator it = f->vhash.find(identificador);
						std::map<std::wstring,Variable *>::iterator itglobal = tabglobales->vhash.find(identificador);

						if( it != f->vhash.end() || itglobal != tabglobales->vhash.end()) {
							std::wcout << L"("<<identificador<<L")";
							Err(L"Variable already declared.");
						}else{
							//Si es un prametro de la funcion
							//Tambien se agrega a la lista de parametros
							if(parametros == 1){
								f->parametros->Append(tipovariable);
							}
							v = new Variable();
							v->nombre = identificador;
							v->tipo = tipovariable;
							switch(tipovariable){
								case 11://entero
									f->intNum++;
									v->direccion=f->intNum;
	
									break;
	
								case 12://flotante
									f->floatNum++;
									v->direccion=f->floatNum;
									break;
	
								case 13://string
									f->stringNum++;
									v->direccion=f->stringNum;
									break;

							}
							f->vhash.insert(std::make_pair(v->nombre,v));
						}
				}else if(tipo == funcion){
					std::map<std::wstring,FuncionX *>::iterator it = tab->fhash.find(identificador);

					//Con esto se sobreescribe la funcion poniendo la ultima en la lista
					//Es una forma de lidiar con funciones con el mismo nombre
					if(identificador == f->nombre){
						delete(f);
						f = new FuncionX();
						f->nombre = identificador;
						f->tipo = tipofuncion;
						std::wcout <<L"("<< identificador<<L")";
						Err(L"Function already declared.");
					}else if( it == tab->fhash.end()) {
						//Checa si hay una funcion antes de crear la funcion main
						if(f->nombre == std::wstring(L"")){
							f->nombre=identificador;
							f->tipo=tipofuncion;
					
						}else{
							//Inserta la funcion  al hash y crea la funcion main
							tab->fhash.insert(std::make_pair(f->nombre,f));
							f = new FuncionX();
							f->nombre=identificador;
							f->tipo=tipofuncion;
						}
					}else{
						//Ejecuta lo mismo que el primer if, solo que cuando ya existe en el hash
						tab->fhash.insert(std::make_pair(f->nombre,f));
						tab->fhash.erase(it);
						f = new FuncionX();
						f->nombre = identificador;
						std::wcout <<L"("<< identificador<<L")";
						Err(L"Function already declared.");
					}

				} else if(tipo == lectura){
					std::map<std::wstring,Variable *>::iterator it = f->vhash.find(identificador);
					std::map<std::wstring,Variable *>::iterator itglobal = tabglobales->vhash.find(identificador);
					if( it != f->vhash.end() || itglobal != tabglobales->vhash.end()) {
						//Read Variable
					}else{
						std::wcout <<L"("<< identificador<<L")";
						Err(L"Trying to read and variable doesn't exist.");
					}	
				}else if(tipo == escritura){
					std::map<std::wstring,Variable *>::iterator it = f->vhash.find(identificador);
					std::map<std::wstring,Variable *>::iterator itglobal = tabglobales->vhash.find(identificador);
					if( it != f->vhash.end() || itglobal != tabglobales->vhash.end()) {
						//Write Variable
					}else{
						std::wcout <<L"("<< identificador<<L")";
						Err(L"Trying to write and variable doesn't exist.");
					}		
				}else if(tipo == condicion || tipo == ciclo){
					std::map<std::wstring,Variable *>::iterator it = f->vhash.find(identificador);
					std::map<std::wstring,Variable *>::iterator itglobal = tabglobales->vhash.find(identificador);
					if( it != f->vhash.end() || itglobal != tabglobales->vhash.end()) {
						//Do whatever
					}else{
						if((it->second)->tipo == 13 ){
							std::wcout <<L"("<< identificador<<L")";
							Err(L"Trying use a String value in expresion.");
						}else{
							std::wcout <<L"("<< identificador<<L")";
							Err(L"Trying use a variable that doesn't exist.");
						}
					}		

				}else if(tipo == regreso){
					std::map<std::wstring,Variable *>::iterator it = f->vhash.find(identificador);
					std::map<std::wstring,Variable *>::iterator itglobal = tabglobales->vhash.find(identificador);
					if( it != f->vhash.end() || itglobal != tabglobales->vhash.end()) {
						//Do Return
					}else{
						std::wcout <<L"("<< identificador<<L")";
						Err(L"Trying use a variable that doesn't exist.");
					}
				}

			.).


END QRex.
